//Method 1 --> using DP

class Solution {
public:
    
    int climbStairs(int n) {
        //base case
        if(n<2) return n;
        
        //Here we have to calculate the no. of ways to travel n steps
        
        //defining the dp table and setting its initial values
        int dp[n+1];
        dp[n-1]=1;   //1 way to go from n-1 step to n step 
        dp[n-2]=2;   // 2 ways to go from n-2 to n step ( either direct +2 or 1+1)
        
        for(int i=n-3;i>=0;i--){
            dp[i]=dp[i+1]+dp[i+2];
        }
        
        return dp[0];
        
    }
};







//Method 2 (without using DP)
/*
class Solution {
public:

    int climbStairs(int n) {
        
    if(n<=2) return n;
        int x=1;
        int y=2;
        int ways=0;
        for(int i=3;i<=n;i++){
            
            ways= x+y;
            x=y;
            y=ways;
            
        }
        
        
        return ways;
        
        
    }
};

n steps, 1 2 
    n= 1    ways= 1
    n= 2    ways= 2
    n= 3    ways= 2+1=3
    n= 4    ways= 3+2= 5
    n= 5    ways= 3=5= 8*/